import requests
import os
import gdown
from flask import Flask, request
import telebot
from random import randint
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running"


@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_update([update])
    return '', 200
    
@bot.message_handler(commands =['start'])
def send_welcome(message):
    try:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = telebot.types.KeyboardButton(text="–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫")
        button2 = telebot.types.KeyboardButton(text="–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç")
        keyboard.add(button1, button2)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - /list", reply_markup=keyboard)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands =['date'])
def date(message):
    try:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å: " + str(datetime.today()))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands =['random'])
def random(message):
    try:
        bot.send_message(message.chat.id, "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: " + str(randint(1, 1000)))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['image'])
def send_image(message):
    try:
        file = open("mama.jpg", 'rb')
        bot.send_photo(message.chat.id, file, caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ")
        file.close()
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['coin'])
def coin(message):
    try:
        res = randint(0, 1)
        if res == 0:
            bot.send_message(message.chat.id, "–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!")
        elif res == 1:
            bot.send_message(message.chat.id, "–í—ã–ø–∞–ª –æ—Ä—ë–ª!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['list'])
def list(message):
    try:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                                          "/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                                          "/about - –æ–±–æ –º–Ω–µ\n"
                                          "/date - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
                                          "/random - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n"
                                          "/image - –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
                                          "/coin - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
                                          "/list - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                                          "\n"
                                          "–ê —Ç–∞–∫-–∂–µ –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, /<–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥–∞–¥–∫—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ>\n"
                                          "–ó–∞–≥–∞–¥–∫–∞: –õ–µ—Ç–∏—Ç-–ª–µ—Ç–∏—Ç\n"
                                          "–ë–µ–∂–∏—Ç-–±–µ–∂–∏—Ç\n"
                                          "–ò–¥—ë—Ç-–∏–¥—ë—Ç\n"
                                          "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ–¥–∏–Ω –¥—è–¥—è - ..–∫–∞–º–∏–ª—å, –∑–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–∞–∂–µ –¥–ª—è —ç—Ç–æ–≥–æ")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['time'])
def time(message):
    try:
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n"
                                          "–í–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞:\n"
                                          "ÁßÅ„ÇíÂä©„Åë„Å¶ÁßÅ„ÅØ‰∫∫Ë≥™„Å´ÊãòÊùü„Åï„Çå„Å¶„ÅÑ„Åæ„Åô")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['about'])
def about(message):
    try:
        bot.send_message(message.chat.id, "–Ø - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(content_types=['text'])
def answer(message):
    try:
        text = message.text

        if text—Ñ == "–ü—Ä–∏–≤–µ—Ç":
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
        elif text == "–ö–∞–∫ –¥–µ–ª–∞?":
            bot.send_message(message.chat.id, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!")
        elif text == "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?":
            bot.send_message(message.chat.id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç!")
        elif text == "–ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç":
           value = bot.send_dice(message.chat.id, emoji='üé∞').dice.value
           if value in (1, 16, 22, 32, 43, 48):
               bot.send_message(message.chat.id, "–ü–æ–±–µ–¥–∞!")
           elif value == 64:
               bot.send_message(message.chat.id, "–î–∂–µ–∫–ø–æ—Ç!")
           else:
               bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        elif text == "–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫":
            keyboard2 = telebot.types.InlineKeyboardMarkup(row_width=3)
            button1 = telebot.types.InlineKeyboardButton("1", callback_data='1')
            button2 = telebot.types.InlineKeyboardButton("2", callback_data='1')
            button3 = telebot.types.InlineKeyboardButton("3", callback_data='3')
            button4 = telebot.types.InlineKeyboardButton("4", callback_data='4')
            button5 = telebot.types.InlineKeyboardButton("5", callback_data='5')
            button6 = telebot.types.InlineKeyboardButton("6", callback_data='6')
            keyboard2.add(button1, button2, button3, button4, button5, button6)
            bot.send_message(message.chat.id, "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –Ω–∞ –∫—É–±–∏–∫–µ", reply_markup=keyboard2)
        else:
            bot.send_message(message.chat.id, text)
    except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")
@bot.callback_query_handler(func=lambda call: call.data in ("1", "2", "3", "4", "5", "6"))
def dice_answer(call):
    value = bot.send_dice(call.message.chat.id, emoji='').dice.value
    if str(value) == call.data:
        bot.send_message(call.message.chat.id, "–í—ã —É–≥–∞–¥–∞–ª–∏!")
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")


if __name__ == "__main__":
    server_url = os.getenv("RENDER_EXTERNAL_URL")
    if server_url and TOKEN:
        webhook_url = f"{server_url}/{TOKEN}"
        set_webhook_url = f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={webhook_url}"
        try:
            r = requests.get(set_webhook_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", r.text)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:", e)

        port = int(os.environ.get("PORT", 10000))
        print(f"Starting server on port {port}")
        app.run(host='0.0.0.0', port=port)
    else:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ pooling")
        bot.remove_webhook()
        bot.polling(none_stop=True)
